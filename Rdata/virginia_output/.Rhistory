library(dplyr) # dataframe manipulation
library(stringr) # string manipulation
# set path to github repository
user <- "sds/cc"
path.to.github <- switch(user,
"sds/cc" = "~/Documents/GitHub/metatranscriptome/",
"gg" = "~/Documents/0_git/projects/metatranscriptome/")
# get list of files in directory
output.files <- list.files(path = paste(path.to.github,
"Rdata/virginia_output/",
sep = ""),
pattern = "output")
# add a vector of the order the files should be read
output.files <- as.data.frame(cbind(files=output.files, order= c(13,1,10,11,12,2:9)))
output.files$order <- as.numeric(output.files$order)
# rearrange based on 'order' and remove 'output_take3_mapping_virginia.txt',
# which contains info for only 1 failed sample
output.files <- output.files %>%
arrange(order) %>%
slice(1:2, 4:13)
# total number of samples is 297; generate vectors of this length for sample id
# and all read values
vec.1.sample.id <- vector(length = 297)
vec.2.raw <- vector(length = 297)
vec.3.trim <- vector(length = 297)
vec.4.hg38 <- vector(length = 297)
vec.5.t2t <- vector(length = 297)
vec.6.rrna <- vector(length = 297)
vec.7.virgo <- vector(length = 297)
# initialise main loop
for(file in 1:nrow(output.files)){
# read in output text file, making sure to disable interpretation of comment
# characters as some read info lines begin with '#'
std.out<-read.table(output.files$files[file], header = FALSE, sep = "\t", quote = "",
check.names = FALSE, comment.char = "")
# get number of samples processed in this file
num.samples <- length(grep("TrimmomaticSE: Started with arguments:", std.out$V1))
# check for output file that completed normally
if("Reported"  %in% str_split_i(std.out$V1[nrow(std.out)], " ", 1)){
# initialise sub-loop for all samples in output file
for(samp in 1:num.samples){
# get index of SRR sample ID row
index.1.sample.id <- grep("-threads", std.out$V1)[samp]
# get sample ID and remove '.fastq.gz' from it (all 'SRR' IDs are same length)
item.1.sample.id <- str_split_i(std.out$V1[index.1.sample.id], " ", 4)
item.1.sample.id <- substr(item.1.sample.id,start = 1, stop = 12)
# get index of raw and trimmed reads row
index.2.reads.raw.trim<- grep("Input", std.out$V1)[samp]
# get number of raw reads and number of trimmed reads
item.2.reads.raw <- as.integer(str_split_i(std.out$V1[index.2.reads.raw.trim], " ", 3))
item.3.reads.trim <- as.integer(str_split_i(std.out$V1[index.2.reads.raw.trim], " ", 5))
# get the index of the "TrimmomaticSE: Completed successfully" row and use this
# as a base index to calculate the indices of each mapping step
index.3.mapping.base <- grep("TrimmomaticSE: Completed successfully",std.out$V1)[samp]
# calculate indices of HG38-mapped, T2T-mapped, SILVA-mapped and VIRGO-mapped
# read information
index.4.mapping.hg38 <- as.integer(index.3.mapping.base+3)
index.5.mapping.t2t <- as.integer(index.3.mapping.base+9)
index.6.mapping.rrna <- as.integer(index.3.mapping.base+15)
index.7.mapping.virgo <- as.integer(index.3.mapping.base+24)
# get number of reads that don't align to HG38, T2T and SILVA, as well as the
# number of reads that map to VIRGO
item.4.mapping.hg38 <- as.integer(str_split_i(std.out$V1[index.4.mapping.hg38], " ", 5))
item.5.mapping.t2t <- as.integer(str_split_i(std.out$V1[index.5.mapping.t2t], " ", 5))
item.6.mapping.rrna <- as.integer(str_split_i(std.out$V1[index.6.mapping.rrna], " ", 5))
item.7.mapping.virgo <- as.integer(str_split_i(std.out$V1[index.7.mapping.virgo], " ", 9))
# get index of the position to add the items
position.chr <- as.integer(min(which(vec.1.sample.id==FALSE)))
position.int <- as.integer(min(which(vec.7.virgo==0)))
# add all items as the position'th element of reads.x objects
if(is.logical(vec.7.virgo)){
vec.1.sample.id[position.chr] <- item.1.sample.id
vec.2.raw[position.chr] <- item.2.reads.raw
vec.3.trim[position.chr] <- item.3.reads.trim
vec.4.hg38[position.chr] <- item.4.mapping.hg38
vec.5.t2t[position.chr] <- item.5.mapping.t2t
vec.6.rrna[position.chr] <- item.6.mapping.rrna
vec.7.virgo[position.chr] <- item.7.mapping.virgo
}else if(is.integer(vec.2.raw)){
vec.1.sample.id[position.chr] <- item.1.sample.id
vec.2.raw[position.int] <- item.2.reads.raw
vec.3.trim[position.int] <- item.3.reads.trim
vec.4.hg38[position.int] <- item.4.mapping.hg38
vec.5.t2t[position.int] <- item.5.mapping.t2t
vec.6.rrna[position.int] <- item.6.mapping.rrna
vec.7.virgo[position.int] <- item.7.mapping.virgo
}
}
}else if(std.out$V1[nrow(std.out)] == "VIRGO path   = /Volumes/data/twntyfr_2018/VIRGO/"){
for(samp in 1:(num.samples-1)){
# get index of SRR sample ID row
index.1.sample.id <- grep("-threads", std.out$V1)[samp]
# get sample ID and remove '.fastq.gz' from it (all 'SRR' IDs are same length)
item.1.sample.id <- str_split_i(std.out$V1[index.1.sample.id], " ", 4)
item.1.sample.id <- substr(item.1.sample.id,start = 1, stop = 12)
# get index of raw and trimmed reads row
index.2.reads.raw.trim<- grep("Input", std.out$V1)[samp]
# get number of raw reads and number of trimmed reads
item.2.reads.raw <- as.integer(str_split_i(std.out$V1[index.2.reads.raw.trim], " ", 3))
item.3.reads.trim <- as.integer(str_split_i(std.out$V1[index.2.reads.raw.trim], " ", 5))
# get the index of the "TrimmomaticSE: Completed successfully" row and use this
# as a base index to calculate the indices of each mapping step
index.3.mapping.base <- grep("TrimmomaticSE: Completed successfully",std.out$V1)[samp]
# calculate indices of HG38-mapped, T2T-mapped, SILVA-mapped and VIRGO-mapped
# read information
index.4.mapping.hg38 <- as.integer(index.3.mapping.base+3)
index.5.mapping.t2t <- as.integer(index.3.mapping.base+9)
index.6.mapping.rrna <- as.integer(index.3.mapping.base+15)
index.7.mapping.virgo <- as.integer(index.3.mapping.base+24)
# get number of reads that don't align to HG38, T2T and SILVA, as well as the
# number of reads that map to VIRGO
item.4.mapping.hg38 <- as.integer(str_split_i(std.out$V1[index.4.mapping.hg38], " ", 5))
item.5.mapping.t2t <- as.integer(str_split_i(std.out$V1[index.5.mapping.t2t], " ", 5))
item.6.mapping.rrna <- as.integer(str_split_i(std.out$V1[index.6.mapping.rrna], " ", 5))
item.7.mapping.virgo <- as.integer(str_split_i(std.out$V1[index.7.mapping.virgo], " ", 9))
# get index of the position to add the items
position.chr <- as.integer(min(which(vec.1.sample.id==FALSE)))
position.int <- as.integer(min(which(vec.7.virgo==0)))
# add all items as the position'th element of reads.x objects
if(is.logical(vec.7.virgo)){
vec.1.sample.id[position.chr] <- item.1.sample.id
vec.2.raw[position.chr] <- item.2.reads.raw
vec.3.trim[position.chr] <- item.3.reads.trim
vec.4.hg38[position.chr] <- item.4.mapping.hg38
vec.5.t2t[position.chr] <- item.5.mapping.t2t
vec.6.rrna[position.chr] <- item.6.mapping.rrna
vec.7.virgo[position.chr] <- item.7.mapping.virgo
}else if(is.integer(vec.2.raw)){
vec.1.sample.id[position.chr] <- item.1.sample.id
vec.2.raw[position.int] <- item.2.reads.raw
vec.3.trim[position.int] <- item.3.reads.trim
vec.4.hg38[position.int] <- item.4.mapping.hg38
vec.5.t2t[position.int] <- item.5.mapping.t2t
vec.6.rrna[position.int] <- item.6.mapping.rrna
vec.7.virgo[position.int] <- item.7.mapping.virgo
}
}
}
}
final.read.summary <- as.data.frame(cbind(sample.id= vec.1.sample.id,
reads.raw= vec.2.raw,
reads.trim= vec.3.trim,
reads.hg38= vec.4.hg38,
reads.t2t= vec.5.t2t,
reads.rRNA= vec.6.rrna,
reads.virgo= vec.7.virgo))
final.read.summary <- final.read.summary %>%
arrange(sample.id)
View(final.read.summary)
source(paste(path.to.github,"code/setup.R", sep = ""))
View(all.meta)
View(m.ena)
View(nr.ena)
View(m.24)
View(m.ena)
